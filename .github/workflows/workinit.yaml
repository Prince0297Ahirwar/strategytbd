name: test cloud function deploy
on: push

jobs:
  cloudfunctiondeploy:
    runs-on: ubuntu-latest
    name: Test cloud function deploy
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4

      - name: Extract branch name
        id: extract_branch
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
         files: 'cloudfunctions/**'
         files_ignore: 'cloudfunctions/config/**'
         dir_names: "true"
      - name: get list of folders modified till depth 2
        id: changed-paths
        run: |   
          ls -l
          declare -A processed_paths
          IFS=' ' read -ra files <<< "${{ steps.changed-files.outputs.all_changed_files }}"
          for file in "${files[@]}"; do
            IFS='/' read -ra ADDR <<< "$file"
            if [ "${#ADDR[@]}" -gt 1 ]; then
              path_depth_2="${ADDR[0]}/${ADDR[1]}"
              processed_paths["$path_depth_2"]=1
            fi
          done

          for path in "${!processed_paths[@]}"; do
            echo "path: ${path}" 
          done

          # Convert associative array keys to an indexed array to remove dups
          processed_array=("${!processed_paths[@]}")

          config_dir="cloudfunctions/config"
          output_array=()

          for path in ${processed_array[@]}; do

          function_name=$(basename "$path")
          
          config_file="${config_dir}/${function_name}.yaml"

              if [[ -f "$config_file" ]]; then

                   yq eval-all 'select(fileIndex == 1) * select(fileIndex == 0)' "$config_file" "./environments/cloudfunctions/$BRANCH_NAME.yaml" > ${function_name}_merged.yaml
                  
              else
                    echo "Configuration file $config_file does not exist."
                    
                    cat "./environments/cloudfunctions/$BRANCH_NAME.yaml" > ${function_name}_merged.yaml
              fi
              output_array+=(${function_name}_merged.yaml)
          done
          configFiles=()
          ls
          for output in ${output_array[@]}; do
            json_file="${output%.yaml}.json"
            yq eval -o=json "$output" > "$json_file"
            configFiles+=($json_file)
          done
          echo ${configFiles[@]}
          echo "json=(${configFiles[@]})" >> $GITHUB_ENV 

      - name: print env variable
        run: |
          echo "${json}"
      - name: json to variable
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: ${{ env.json}}
          prefix: test
          masked: true

        
      


